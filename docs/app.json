[{"name":"server.R","content":"\n#TODO: supprimer 02/11 JF comme si c'était un RTT\n#TODO: bouton exemple qui charge mes congés\n#TODO: gérer les congres, ajouter le nom ?\n#TODO: boutons fleches pour changer d'année\n#TODO: tableau par période. Exemple congé : n_days, truc de l'été, truc de octobre (ou c'est les RTT?)\n\n\n# Init ----------------------------------------------------------------------------------------\n\noptions(\n  # lubridate.week.start = 1,\n  DT.options = list(pageLength=5, lengthChange=FALSE, searching=FALSE)\n)\n\nsuppressPackageStartupMessages({\n  library(dplyr)\n  library(DT)\n  library(forcats)\n  library(glue)\n  library(lubridate)\n  library(plotly) \n  library(purrr)\n  library(shiny)\n  library(stringr)\n  library(tidyr)\n  library(tibble)\n})\n\nsource(\"functions.R\")\n\n\n#GLOBALS\nmonth_names = month(1, label=TRUE) %>% levels()\nuser_input = list()\n\ncli::cli_inform(c(v=\"Shiny server started, encoding={getOption('encoding')}\"))\n\n# Server --------------------------------------------------------------------------------------\n\n\nfunction(input, output, session) {\n  toggle_click_fromto = 0\n  all_user_input = list_c(user_input)\n  if(length(all_user_input)==0) all_user_input = today()\n  first_date = floor_date(min(all_user_input), \"year\")\n  last_date = ceiling_date(max(all_user_input), \"year\") - days(1)\n  input_years = seq(year(min(all_user_input)), year(max(all_user_input)))\n  \n  jours_feries = get_jours_feries(first_date, last_date)\n  \n  r_user_input = reactiveValues(!!!user_input)\n  \n  db_dates = reactive({\n    rtn = get_data(reactiveValuesToList(r_user_input), jours_feries) \n    showNotificationCli(\"db_dates() : {.val {nrow(rtn)}} lignes\", type=\"default\")\n    rtn\n  }) \n  \n  selected_year = reactive({\n    a = input$selected_year  \n    if(a==\"Tout\") a=NULL\n    if(is.null(a) | a==\"\") a = year(today())\n    a\n  })\n  \n  ## Update le choix d'années selon user_input ----\n  updateSelectInput(session, \"selected_year\",\n                    # choices = c(\"Tout\", rev(input_years)),\n                    choices = c(rev(input_years)),\n                    selected = max(input_years))\n  \n  ## Match `period_to` & `period_from` ----\n  observeEvent(input$period_from, {\n    updateDateInput(session, \"period_to\", value=input$period_from)\n  })\n  \n  \n  ## Build r_user_input ----\n  observeEvent(input$action_input, { \n    type = isolate(input$period_type)\n    from = isolate(input$period_from)\n    to = isolate(input$period_to) \n    \n    showNotificationCli(\"Ajout de données : {.val {toupper(type)}} du  {.val {from}} au  {.val {to}}\", \n                        type=\"default\")\n    r_user_input[[type]] = unique(c(seq(from, to, by=\"day\"), r_user_input[[type]]))\n  })\n  \n  ## Example r_user_input ----\n  observeEvent(input$action_example, { \n    source(\"user_input_example.R\")\n    example_input = get_example_input()\n    update_input(example_input, r_user_input, parent.frame())\n    showNotificationCli(\"Chargement de exemple : {.val {sum(lengths(example_input))}} entrées\", \n                        type=\"default\") \n  })\n  \n  ## Download user input ----\n  output$action_download = downloadHandler(filename=\"gr_calendar.rds\", content = function(file) {\n    input = reactiveValuesToList(r_user_input)\n    showNotificationCli(\"Téléchargement de données : {.val {sum(lengths(input))}} entrées\", \n                        type=\"default\")\n    saveRDS(input, file=file)\n  })\n  \n  ## Upload user input ----\n  observeEvent(input$file, {    \n    f = input$file\n    ext = tools::file_ext(f$datapath)\n    req(f)\n    validate(need(ext==\"rds\", \"L'appli ne comprend que les fichiers .rds\"))\n\n    new_content = readRDS(f$datapath)\n    update_input(new_content, r_user_input, parent.frame())\n    showNotificationCli(\"Chargement de données : {.val {sum(lengths(new_content))}} entrées\", \n                        type=\"default\")\n    \n    # iwalk(new_content, ~ {r_user_input[[.y]] <<- unique(c(.x, r_user_input[[.y]]))})\n  })\n  \n  ## Plot click = Update date input ----\n  observe({\n    x = req(input$plot_click)\n    if(!is.null(x)){\n      a = selected_year()\n      tgt = make_date(year=as.numeric(a), month=13-round(x$y), day=round(x$x))\n      if(is.na(tgt)) return()\n      inputId = c(\"period_from\", \"period_to\")[toggle_click_fromto+1]\n      updateDateInput(session, inputId, value=tgt)\n      toggle_click_fromto <<- 1-toggle_click_fromto\n    }\n    # browser()\n  })\n  observe({\n    x = event_data(\"plotly_click\", source=\"calendar_plot\")\n    if(!is.null(x)){\n      a = selected_year()\n      tgt = make_date(year=as.numeric(a), month=13-x$y, day=x$x)\n      if(is.na(tgt)) return()\n      inputId = c(\"period_from\", \"period_to\")[toggle_click_fromto+1]\n      updateDateInput(session, inputId, value=tgt)\n      toggle_click_fromto <<- 1-toggle_click_fromto\n    }\n  })\n   \n  \n  ## Boutons supprimer ----\n  suppr_period = function(i, tb, val, label) {\n    if(length(i)==0) {\n      showNotificationCli(\"Sélectionner une ligne pour la supprimer\", type=\"error\")\n      return(0)\n    }\n    \n    dat = tb[i,] %>% \n      mutate(across(any_of(c(\"start\", \"stop\", \"date\")), dmy))\n    if(nrow(dat)!=1) {\n      showNotificationCli(\"Erreur 22838, merci d'ajouter une issue, si possible avec le fichier rds attaché.\",\n                          type=\"error\")\n      return(0)\n    }\n    \n    if(val==\"recupJF\"){\n      x = dat$date\n      showNotificationCli(\"Suppression du {label} du {.val {date}}\", type=\"default\")\n    } else {\n      x = seq(dat$start, dat$stop, by=\"days\")\n      showNotificationCli(\"Suppression des {label} du {.val {format_dmy(dat$start)}} \n                          au {.val {format_dmy(dat$stop)}}\", \n                          type=\"default\")\n    }    \n    \n    \n    r_user_input[[val]] = setdiff(r_user_input[[val]], x)\n  }\n  \n  \n  observeEvent(input$action_del_ca,  \n               suppr_period(input$table_CA_rows_selected, table_CA(), \"conges\", \"congés\"))\n  observeEvent(input$action_del_rtt, \n               suppr_period(input$table_RTT_rows_selected, table_RTT(), \"rtt\", \"RTT/JNT\"))\n  observeEvent(input$action_del_jf, \n               suppr_period(input$table_recupJF_rows_selected, table_recupJF(), \"recupJF\", \"Récupération JF\"))\n  \n  \n  ##TODO Suppressions CA \n  # observeEvent(input$action_del_ca, {\n  #   return(NULL)\n  #   \n  #   i = input$table_CA_rows_selected\n  #   if(length(i)==0) {\n  #     showNotificationCli(\"Sélectionner une ligne pour la supprimer\", type=\"error\")\n  #     return(NULL)\n  #   }\n  #   dat = table_CA()[i,] %>% \n  #     mutate(start=dmy(start), stop=dmy(stop))\n  #   if(nrow(dat)!=1) {\n  #     showNotificationCli(\"Erreur 22838, merci d'ajouter une issue, si possible avec le fichier rds attaché.\",\n  #                         type=\"error\")\n  #     return(NULL)\n  #   }\n  #   \n  #   x = seq(dat$start, dat$stop, by=\"days\")\n  # \n  #   showNotificationCli(\"Suppression des congés du {.val {format_dmy(dat$start)}} au {.val {format_dmy(dat$stop)}}\", \n  #                       type=\"default\")\n  #   \n  #   r_user_input$conges = setdiff(r_user_input$conges, x)\n  # })\n  \n  \n  \n  ## Output Warnings ? ----\n  output$warnings = renderPrint({\n    \"WARNING!\"\n  })\n  \n  \n  \n  ## Output Tables CA/RTT/JF ----\n  table_CA = reactive({\n    db_dates() %>% \n      filter(seq_conges==TRUE) %>% \n      summarise(\n        start = wmin(date), \n        stop = wmax(date), \n        length = sum(!weekend),\n        length2 = sum(!weekend & !ferie),\n        raw_length=n(),\n        .by=gp_conges\n      ) %>% \n      mutate(across(where(is.Date), format_dmy)) %>% \n      select(start, stop, length)\n  })\n  table_RTT = reactive({\n    db_dates() %>% \n      filter(seq_rtt==TRUE) %>% \n      summarise(\n        start = wmin(date), \n        stop = wmax(date), \n        length = sum(!weekend),\n        length2 = sum(!weekend & !ferie),\n        raw_length=n(),\n        .by=gp_rtt\n      ) %>% \n      mutate(across(where(is.Date), format_dmy)) %>% \n      select(start, stop, length=length2)\n  })\n  table_recupJF = reactive({\n    db_dates() %>%\n      filter(recup_jf) %>% \n      mutate(across(where(is.Date), format_dmy)) %>% \n      select(date, source=recup_jf_source)\n  })\n  \n  output$table_CA = renderDT(table_CA(), options=list(), server=FALSE, rownames=FALSE, selection=\"single\")\n  output$table_RTT = renderDT(table_RTT(), options=list(), server=FALSE, rownames=FALSE, selection=\"single\")\n  output$table_recupJF = renderDT(table_recupJF(), options=list(), server=FALSE, rownames=FALSE, selection=\"single\")\n  \n  \n  \n  ## Output Plot ----\n  output$plot_title = renderText(paste(\"Calendrier de l'année\", selected_year()))\n  output$calendarPlotly = renderPlotly({ \n    if(!input$plot_plotly) return(NULL)\n    a = selected_year()\n    db = db_dates()\n    showNotificationCli(\"render calendarPlot annee={.val {a}}, plotly={.val {TRUE}}\", type=\"default\")\n\n    get_calendar_plot(data=db, annee=a, plotly=TRUE)\n  })\n  output$calendarPlot = renderPlot({ \n    if(input$plot_plotly) return(NULL)\n    a = selected_year()  \n    db = db_dates()\n    # showNotificationCli(\"render calendarPlot annee={.val {a}}, plotly={.val {input$plot_plotly}}\", type=\"default\")\n    showNotificationCli(\"render calendarPlot annee={.val {a}}, plotly={.val {FALSE}}\", type=\"default\")\n    # if(is.null(a) | a==\"\" | nrow(db)==0) return(ggplot())\n    validate(need(!is.null(a) & a!=\"\" & nrow(db)>0, \n                  \"Calcul du graphique\"))\n    get_calendar_plot(data=db, annee=a, plotly=FALSE)\n  })\n}\n","type":"text"},{"name":"ui.R","content":"\n# options(encoding=\"UTF-8\")\n# Sys.setenv(LANGUAGE=\"fr\")\n\nsuppressPackageStartupMessages({\n  library(DT)\n  library(plotly) \n  library(shiny)\n})\n\nsource(\"debug_js.R\")\n\ncss = tags$head(tags$style(HTML(\"\n  #shiny-notification-panel {\n    //position:fixed;\n    //left: 50%;\n    //transform: translate(-50%, 0%);\n    width: 400px;\n  }\n  \n  .well {\n    padding: 8px;\n  }\n  \n  .progress {\n    margin-bottom: 0;\n  }\n  .form-group {\n    margin-bottom: 0;\n  } \n\")))\n\n\n\nfluidPage(\n  css,\n  \n  titlePanel(\"GR Calendar\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      width = 2,\n      \n      wellPanel(\n        h3(\"Paramètres\"),\n        # selectInput(\"selected_year\", label=\"Année\", choices=\"Tout\"),\n        selectInput(\"selected_year\", label=\"Année\", choices=c()),\n        numericInput(\"n_rtt\",\n                     \"Nombre de RTT/JNT:\",\n                     value = 18),\n        checkboxInput(\"plot_plotly\", label=\"Plotly ?\"),\n      ),\n      \n      wellPanel(\n        h3(\"Ajouter une période\"),\n        p(\"(Cliquer sur le graphique)\"),\n        selectInput(\"period_type\", label=\"Type\", \n                    choices=c(\"Congés annuels\"=\"conges\", \"RTT/JNT\"=\"rtt\", \n                              \"Récup JF\"=\"recup_jf\", \"Congrès\"=\"congres\")),\n        fluidRow(\n          column(width=6, dateInput(\"period_from\", label=\"Début\", language=\"fr\", format=\"dd/mm/yyyy\")),\n          column(width=6, dateInput(\"period_to\", label=\"Fin\", language=\"fr\", format=\"dd/mm/yyyy\")),\n        ),\n        actionButton(\"action_input\", \"Ajouter\")\n      ),\n      \n      wellPanel(\n        h3(\"Fichiers\"),\n        fileInput(\"file\", label=\"Importer des entrées\", accept=\".rds\", buttonLabel=\"Parcourir\"), \n        tags$label(\"Exporter les entrées\"),\n        downloadButton(\"action_download\", \"Télécharger\"),\n        actionButton(\"action_example\", \"Charger un Exemple\"),\n      ),\n    ),\n    \n    mainPanel(\n      h3(uiOutput(\"plot_title\")),\n      wellPanel(\n        conditionalPanel(\n          condition = \"input.plot_plotly\",\n          plotlyOutput(\"calendarPlotly\", fill=FALSE)\n        ),\n\n        conditionalPanel(\n          condition = \"!input.plot_plotly\",\n          plotOutput(\"calendarPlot\", fill=TRUE, click=\"plot_click\")\n        )\n      ),\n      # textOutput(\"warnings\"),\n      wellPanel(\n        fluidRow(\n          column(width = 4, h3(\"Congés annuels\"), DTOutput(\"table_CA\"), \n                 actionButton(\"action_del_ca\", \"Supprimer\")),\n          column(width = 4, h3(\"RTT/JNT\"), DTOutput(\"table_RTT\"), \n                 actionButton(\"action_del_rtt\", \"Supprimer\")),\n          column(width = 4, h3(\"Récupérations JF\"), DTOutput(\"table_recupJF\"), \n                 actionButton(\"action_del_jf\", \"Supprimer\")),\n        ),\n      ),\n    )\n  )\n)\n","type":"text"},{"name":"debug_js.R","content":"\nsuppressPackageStartupMessages({\n  library(lubridate)\n})\n\n\n# lubridate:::wday.default()\ncat(\"-------------------------------------------\\n\")\n\nsessionInfo() %>% print()\n\n\n#dommage, system n'est pas supporté \n# cat(\"locales\")\n# locales <- system(\"locale -a\", intern=TRUE)\n# unique(stringr::str_split_fixed(locales, \"\\\\.\", 2)[, 1])  %>% print()\n\n\nprint(Sys.getlocale(\"LC_TIME\"))\n\ncat(\"wday(today x5\")\nwday(today(), label=TRUE, abbr=FALSE, locale=\"French_France.1252\") %>% as.character() %>% print()\nwday(today(), label=TRUE, abbr=FALSE, locale=\"French_France\") %>% as.character() %>% print()\nwday(today(), label=TRUE, abbr=FALSE, locale=\"French\") %>% as.character() %>% print()\nwday(today(), label=TRUE, abbr=FALSE, locale=\"fr_FR.UTF-8\") %>% as.character() %>% print()\nwday(today(), label=TRUE, abbr=FALSE, locale=\"fr\") %>% as.character() %>% print()\n# \n# \n# lubridate:::.get_locale_regs(Sys.getlocale(\"LC_TIME\"))$wday_names %>% print()\n\nprint(htmltools::HTML(\"juju <br> jijij\"))\nwday(today(), label=TRUE, abbr=FALSE) %>% print()\nlocale=\"French_France.1252\"\n\ncat(\"exists(locale\")\nexists(locale, envir=lubridate:::.locale_reg_cache, inherits = FALSE)  %>% print()\ncat(\"Sys.setlocale\")\nSys.setlocale(\"LC_TIME\", locale=locale)\ncat(\"Sys.getlocale\")\nprint(Sys.getlocale(\"LC_TIME\"))\ncat(\"lubridate:::.locale_reg_cache\")\nls(lubridate:::.locale_reg_cache) %>% print() \ncat(\"get(locale\")\nget(locale, envir=lubridate:::.locale_reg_cache) %>% length() %>% print()\n\ncat(\"lubridate:::.get_locale_regs French_France.1252\")\nlubridate:::.get_locale_regs(\"French_France.1252\")$wday_names %>% print()\n\n\ncat(\"wday(today\")\nwday(today(), label=TRUE) %>% as.character() %>% print()\n\n\ncat(\"-------------------------------------------\\n\")","type":"text"},{"name":"functions.R","content":"\n\n\n\nget_jours_feries = function(first_date, last_date, dir=\"jf\"){\n  input_years = seq(year(first_date), year(last_date))\n  for(y in input_years){\n    jours_feries_file = glue(\"{dir}/jours_feries_{y}.json\")\n    if(!file.exists(jours_feries_file)){\n      api = glue(\"https://calendrier.api.gouv.fr/jours-feries/metropole/{y}.json\")\n      # cli_inform(\"Caching {.url {api}}\")\n      download.file(url=api, destfile=jours_feries_file, quiet=TRUE)\n    }\n  }\n  \n  rtn = dir(dir, pattern=\"jours_feries_\\\\d+\\\\.json\", full.names=TRUE) %>% \n    map(~jsonlite::fromJSON(.x)) %>% \n    unlist()\n  rtn \n}\n\n\nget_data = function(user_input, jours_feries){\n  month_names = month(1, label=TRUE) %>% levels()\n  \n  all_user_input = list_c(user_input) \n  if(length(all_user_input)==0) all_user_input = today()\n  first_date = floor_date(min(all_user_input), \"year\")\n  last_date = ceiling_date(max(all_user_input), \"year\") - days(1)\n  \n  \n  rtn =\n    tibble(date = seq(first_date, last_date, by = \"day\"),\n           year = year(date),\n           month = month(date, label=TRUE, locale=\"French_France.1252\"),\n           day = mday(date),\n           weekday = wday(date, label=TRUE, abbr=FALSE, locale=\"French_France.1252\"),\n           w = substr(weekday, 1, 1) %>% str_replace_all(\"s|d\", \"\")) %>%\n    complete(day, month, year) %>%\n    arrange(desc(date)) %>% \n    mutate(\n      month = factor(month, levels=month_names) %>% fct_rev(),\n      day_label = day %>% str_pad(width=2, pad=\"0\") %>% factor(),\n      ferie_name = jours_feries[as.character(date)],\n      \n      weekend = wday(date, week_start=1) %in% 6:7,\n      ferie = !is.na(ferie_name),\n      conges = date %in% user_input$conges,\n      congres = date %in% user_input$congres,\n      recup_jf = date %in% user_input$recup_jf, #récupération de JF\n      rtt_bak = date %in% user_input$rtt,\n      rtt = ifelse(rtt_bak & (ferie|conges), FALSE, rtt_bak),\n      work = !(weekend|ferie|rtt|conges),\n      \n      jf_a_recup = ferie & (conges|weekend), #JF à récupérer\n      tmp = (ceiling(month(date)/3+1)*3),\n      jf_a_recup_max = if_else(!jf_a_recup, NA, make_datetime(year, tmp, 1)-days(1)), #fin du trimestre suivant\n      jf_a_recup_day_gp = map2(date, jf_a_recup_max, ~date[recup_jf & date>.x & date<.y]),\n      jf_a_recup_day_gp = if_else(jf_a_recup, jf_a_recup_day_gp, NA),\n      \n      gp_rtt=data.table::rleid(rtt|weekend|ferie), \n      gp_conges=data.table::rleid(conges|weekend), \n      \n      period_rtt = cumsum(day==31 & month==\"déc\"), \n      period_conges = cumsum(day==30 & month==\"avr\"), \n      \n      datef = format(date, \"%A %d %B %Y\"),\n      \n      error = case_when(\n        rtt_bak & conges ~ \"RTT/JNT posé pendant des congés\",\n        rtt_bak & ferie ~ \"RTT/JNT posé pendant un jour férié\",\n        .default = NA\n      )\n    )\n  \n  rtn = rtn %>%\n    mutate(jf_a_recup_day = cur_group()[[1]][[1]][row_number()] %||% NA,\n           .by=jf_a_recup_day_gp) %>% \n    mutate(seq_rtt = ifelse(any(rtt) & first(rtt|weekend|ferie) , TRUE, FALSE),\n           .by = gp_rtt) %>%\n    mutate(seq_conges = ifelse(any(conges) & first(conges|weekend) , TRUE, FALSE),\n           .by = gp_conges)\n  \n  rtn = rtn %>% \n    mutate(\n      recup_jf_source = map_chr(date, ~{\n        # a = !is.na(jf_a_recup_day) & jf_a_recup_day==.x\n        a = replace_na(jf_a_recup_day==.x, FALSE)\n        \n        if(sum(a) >1) browser()\n        if(sum(a) == 0) return(NA)\n        glue(\"{format_dmy(date[a])} ({ferie_name[a]})\")\n        # rtn = glue(\"{format_dmy(date[a])} ({ferie_name[a]})\")\n        # if(length(rtn)!=0) browser()\n        # if(.x==ymd('2024-11-05')) browser()\n        # if(length(rtn)==0) rtn = NA\n        # rtn\n      })      ,\n      day_type = case_when(\n        is.na(date) ~ \"None\",\n        jf_a_recup ~ \"Férié à récupérer\",\n        ferie ~ \"Férié\",\n        weekend ~ \"Weekend\",\n        recup_jf ~ \"Recup JF\",\n        rtt ~ \"RTT/JNT\",\n        conges ~ \"Congés\",\n        congres ~ \"Congrès\",\n        .default=\"Jour de semaine\"\n      ),\n      day_type_color = case_match(\n        day_type, \n        \"None\"~\"black\",\n        \"Férié à récupérer\"~\"grey40\",\n        \"Férié\"~\"grey20\",\n        \"Weekend\"~\"grey70\",\n        \"Recup JF\"~\"chocolate4\",\n        \"RTT/JNT\"~\"orange\",\n        \"Congés\"~\"yellow\",\n        \"Congrès\"~\"cyan3\",\n        \"Jour de semaine\"~\"white\",\n        .default=\"purple\"\n      ),\n      tile_color = case_when(\n        jf_a_recup & is.na(jf_a_recup_day) ~ \"darkred\",\n        jf_a_recup ~ \"darkgreen\",\n        .default = \"grey80\"\n      ),\n      label = case_when(\n        is.na(date) ~ \"\",\n        !is.na(jf_a_recup_day) ~ glue(\"{datef}<br>Férié ({ferie_name})<br>Récupéré le {format_dmy(jf_a_recup_day)}\"),\n        recup_jf ~ glue(\"{datef}<br>{day_type}<br>Récupération du {recup_jf_source}\"),\n        jf_a_recup ~ glue(\"{datef}<br>Férié ({ferie_name})<br>À récupérer avant le {format_dmy(jf_a_recup_max)}\"),\n        ferie ~ glue(\"{datef}<br>Férié ({ferie_name})\"),\n        .default = glue(\"{datef}<br>{day_type}\")\n      ),\n    )\n  rtn\n}\n# db_dates = get_data(user_input, jours_feries)\n\n\nget_calendar_plot = function(data=db_dates, annee=NULL, source=\"calendar_plot\", plotly=TRUE){\n  if(is.null(annee)){\n    data = data %>%\n      mutate(month = glue(\"{month} - {year}\") %>% as_factor())\n    annee_label = paste0(\"Années \", min(data$year), \"-\", (max(data$year)))\n  } else {\n    data = data %>%\n      filter(year==annee)\n    annee_label = paste0(\"Année \", annee)\n  }\n  # if(nrow(data)==0) cli_abort(\"Plot data empty (année={annee})\")\n  datetype_colors = data %>% distinct(day_type, day_type_color) %>% deframe() \n  tile_colors = data %>% distinct(x=tile_color, tile_color) %>% deframe()\n  tile_width = c(.7,.1) %>% set_names(\"TRUE\",\"FALSE\")#TODO ça marche pas !!!\n  ajd = today()\n  p = data %>% \n    ggplot() +\n    aes(x=day_label, y=month, text=label) +\n    geom_tile(aes(fill=day_type, color=tile_color, linewidth=jf_a_recup)) +\n    annotate(\"point\", y=month(ajd, label=TRUE), x=mday(ajd),\n             color=\"darkgreen\", size=5) + #, label=\"Aujourd'hui\"\n    # geom_tile(aes(fill=day_type, color=tile_color), linewidth=0.1)+\n    geom_text(aes(label=w), na.rm=TRUE) +\n    scale_x_discrete(position = \"top\") +\n    scale_linewidth_manual(values=tile_width) +\n    scale_color_manual(values=tile_colors) +\n    scale_fill_manual(values=datetype_colors) +\n    labs(x=NULL, y=NULL) +\n    # labs(title=annee_label) +\n    coord_fixed() +\n    theme_minimal() +\n    theme(\n      legend.position=\"none\"\n    )\n  \n  if(!plotly) return(p)\n  \n  ggplotly(p, tooltip=\"text\", source=source) %>%\n    config(modeBarButtonsToRemove = c(\"zoom\", \"pan2d\", \"select2d\", \"lasso2d\", \n                                      \"zoomIn2d\", \"zoomOut2d\",\"hoverclosest\", \"hoverCompare\")) %>%\n    # \"autoScale2d\", \"resetScale2d\"\n    layout(xaxis = list(side =\"top\" ) )  %>% \n    event_register('plotly_click')\n}\n\n\n# db_dates = get_data(user_input)\n# get_calendar_plot(2024, data=db_dates)  %>%\n#   print()\n\n\n\n\n\n# BAK -----------------------------------------------------------------------------------------\n\n\n\nget_sequence = function(data=db_dates, type=c(\"rtt\", \"conges\")){\n  type = match.arg(type)\n  per = paste0(\"period_\", type)\n  sequ = paste0(\"seq_\", type)\n  gp = paste0(\"gp_\", type)\n  data %>% \n    mutate(\n      start_period = min(date, na.rm=TRUE), \n      stop_period = max(date, na.rm=TRUE), \n      length_period = round(as.numeric(stop_period-start_period)/30.44),\n      .by=!!sym(per)\n    ) %>% \n    filter(!!sym(sequ)==TRUE) %>% \n    summarise(\n      start = min(date), \n      stop = max(date), \n      length = sum(!weekend),\n      length2 = sum(!weekend & !ferie),\n      raw_length=n(),\n      .by=c(!!sym(per), start_period, stop_period, length_period, !!sym(gp))\n    ) %>% \n    arrange(start)\n}\n\n\n\n# Utils ---------------------------------------------------------------------------------------\n\n\n\nformat_dmy = function(x) format(x, \"%d/%m/%Y\")\n\n\ncli_glue = function(x, .envir=parent.frame()) {\n  cli::cli_text(x, .envir=.envir) |> \n    cli::cli_fmt(collapse=TRUE, strip_newline=TRUE) |> \n    stringr::str_replace_all(\"\\n\", \" \")\n}\n\nshowNotificationCli = function(msg, duration=15, type=\"default\") {\n  cli::cli_inform(msg, .envir = parent.frame())\n  msg = cli::ansi_html(cli_glue(msg, .envir = parent.frame()))\n  if(missing(duration) & type!=\"default\") duration=NULL\n  showNotification(HTML(msg), type=type, duration=duration)\n}\n\nsetdiff.Date = function(x, y) base::setdiff(x, y) %>% as_date()\nintersect.Date = function(x, y) base::intersect(x, y) %>% as_date()\n\nwmin = function(...) suppressWarnings(min(...) )\nwmax = function(...) suppressWarnings(max(...) )\n\n\nupdate_input = function(new_input, r_user_input, envir) {\n  iwalk(new_input, ~ {\n    eval({r_user_input[[.y]] = unique(c(.x, r_user_input[[.y]]))}, envir=envir)\n  })\n}\n\ncli::cli_inform(c(v=\"Functions loaded\"))\n","type":"text"},{"name":"jf/jours_feries_2023.json","content":"{\"2023-01-01\": \"1er janvier\", \"2023-04-10\": \"Lundi de Pâques\", \"2023-05-01\": \"1er mai\", \"2023-05-08\": \"8 mai\", \"2023-05-18\": \"Ascension\", \"2023-05-29\": \"Lundi de Pentecôte\", \"2023-07-14\": \"14 juillet\", \"2023-08-15\": \"Assomption\", \"2023-11-01\": \"Toussaint\", \"2023-11-11\": \"11 novembre\", \"2023-12-25\": \"Jour de Noël\"}","type":"text"},{"name":"jf/jours_feries_2024.json","content":"{\"2024-01-01\": \"1er janvier\", \"2024-04-01\": \"Lundi de Pâques\", \"2024-05-01\": \"1er mai\", \"2024-05-08\": \"8 mai\", \"2024-05-09\": \"Ascension\", \"2024-05-20\": \"Lundi de Pentecôte\", \"2024-07-14\": \"14 juillet\", \"2024-08-15\": \"Assomption\", \"2024-11-01\": \"Toussaint\", \"2024-11-11\": \"11 novembre\", \"2024-12-25\": \"Jour de Noël\"}","type":"text"},{"name":"user_input_example.R","content":"\n\n# User input --------------------------------------------------------------\n\nget_example_input = function(){\n  \n  conges = c(\n    #2023\n    # seq(ymd(\"2024-01-08\"), ymd(\"2024-01-14\"), by=\"day\"),\n    seq(ymd(\"2023-03-20\"), ymd(\"2023-03-24\"), by=\"day\"),\n    seq(ymd(\"2023-08-14\"), ymd(\"2023-09-01\"), by=\"day\"),\n    seq(ymd(\"2023-10-16\"), ymd(\"2023-10-20\"), by=\"day\"),\n    \n    #2024\n    seq(ymd(\"2024-03-17\"), ymd(\"2024-03-22\"), by=\"day\"),\n    seq(ymd(\"2024-06-17\"), ymd(\"2024-06-21\"), by=\"day\"),\n    seq(ymd(\"2024-08-12\"), ymd(\"2024-08-30\"), by=\"day\"),\n    \n    NULL\n  )\n  \n  \n  rtt = c(\n    #2023\n    seq(ymd(\"2023-05-02\"), ymd(\"2023-05-05\"), by=\"day\"),\n    ymd(\"2023-08-10\"),\n    ymd(\"2023-08-11\"),\n    seq(ymd(\"2023-11-24\"), ymd(\"2023-11-28\"), by=\"day\"),\n    #bad\n    ymd(\"2023-12-22\"),\n    seq(ymd(\"2023-12-26\"), ymd(\"2023-12-29\"), by=\"day\"),\n    #good\n    # seq(ymd(\"2023-12-22\"), ymd(\"2023-12-29\"), by=\"day\"),\n    \n    #2024\n    seq(ymd(\"2024-05-02\"), ymd(\"2024-05-12\"), by=\"day\"),\n    ymd(\"2024-02-02\"),\n    ymd(\"2024-02-05\"),\n    ymd(\"2024-02-16\"),\n    ymd(\"2024-02-19\"),\n    \n    NULL\n  )\n  \n  recup_jf = c(\n    ymd(\"2023-05-19\"), \n    ymd(\"2023-10-02\"),\n    ymd(\"2024-02-16\"),\n    \n    NULL\n  )\n  \n  congres = c(\n    #2023\n    seq(ymd(\"2023-06-21\"), ymd(\"2023-06-23\"), by=\"day\"),\n    \n    #2024\n    seq(ymd(\"2024-05-15\"), ymd(\"2024-05-17\"), by=\"day\"),\n    seq(ymd(\"2024-06-12\"), ymd(\"2024-06-14\"), by=\"day\"),\n    NULL\n  )\n  \n  \n  \n  \n  # Tests -------------------------------------------------------------------\n  \n  \n  rtt = c(\n    rtt, \n    ymd(\"2023-08-17\"), #intersect avec congés\n    ymd(\"2023-12-25\"), #intersect avec JF\n    ymd(\"2023-10-02\"), #intersect avec recup_JF\n    \n    NULL\n  )\n  \n  recup_jf = c(\n    recup_jf, \n    ymd(\"2024-11-02\"), #recupJF un weekend\n    ymd(\"2024-11-04\"), #2 récupJF au même moment\n    ymd(\"2024-11-05\"), \n    NULL\n  )\n  \n  \n  \n  # Final -------------------------------------------------------------------\n  \n  user_input = lst(conges, rtt, recup_jf, congres)\n  print(lengths(user_input))\n  # saveRDS(user_input, \"user_input.rds\", )\n  \n  # user_input = lst()\n  user_input\n}\n\n","type":"text"}]
